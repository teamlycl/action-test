PROJECT_NAME = "template"
XCODE_PROJECT = "./#{PROJECT_NAME}.xcodeproj"
XCODE_WORKSPACE = "./#{PROJECT_NAME}.xcworkspace"
OUTPUT_DIRECTORY = "./fastlane/builds"
EXPORT_IPA_FILE = "template.ipa"

# beta identifier 설정
app_identifier('me.unpa.dev.dev')

default_platform(:ios)

platform :ios do
  desc "Beta Build and firebase app distribution"
  lane :beta do
    configuration_name = "Release"

    create_keychain(
      name: ENV["KEYCHAIN_NAME"],
      password: ENV["KEYCHAIN_PASSWORD"],
      timeout: 1800,
      default_keychain: true,
      unlock: true,
      lock_when_sleeps: false
    )

    match(
      type: 'adhoc', 
      readonly: is_ci, 
      verbose: true, 
      git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"]),
      keychain_name: ENV["KEYCHAIN_NAME"],
      keychain_password: ENV["KEYCHAIN_PASSWORD"]
    )

    clear_derived_data
    increment_build_number
    
    gym(
      scheme: 'dev',
      workspace: XCODE_WORKSPACE,
      clean: true,
      silent: true,
      output_directory: OUTPUT_DIRECTORY,
      output_name: EXPORT_IPA_FILE,
      configuration: configuration_name,
      export_options: {
        method: ENV["SIGH_PROFILE_TYPE"], # match에서 생성된 타입을 사용
        provisioningProfiles: ENV['MATCH_PROVISIONING_PROFILE_MAPPING'], # match에서 생성한 프로비저닝 프로파일을 사용
        signingStyle: "manual",
        path: XCODE_PROJECT
      },
    )

    firebase_app_distribution(
      app: ENV["FIREBASE_APP"],
      firebase_cli_token: ENV["FIREBASE_TOKEN"],
      groups: ENV["FIREBASE_GROUP"],
      release_notes: ENV["RELEASE_NOTE"],
      debug: true)
  end
end
